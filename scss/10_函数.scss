/*
  color 颜色相关函数
*/
.test1 {
  /* 原始颜色 */
  $baseColor: royalblue;
  background-color: $baseColor;

  /*
    lighten($color, $amount) 调亮颜色
    $color 颜色
    $amount 0%-100%
  */
  background-color: lighten($color: $baseColor, $amount: 30%);

  /*
    darken($color, $amount) 调暗颜色
    $color 颜色
    $amount 0%-100%
  */
  background-color: darken($color: $baseColor, $amount: 30%);

  /*
    opacity($color) 返回一个颜色的透明度
    $color 颜色
  */
  background-color: opacity($baseColor); // 1

  /*
    opacify($color, $amount) 修改一个颜色的透明度
    $color 颜色
    $amount 0-1
    注意：颜色本身的透明度 + $amount > 1 时，就是纯色的$color
  */
  background-color: opacify(rgba(0, 0, 0, 0.2), $amount: 0.4); // rgba(0, 0, 0, 0.6)
  background-color: opacify(rgba(0, 0, 0, 0.2), $amount: 1); // black
}

/*
  string 字符串函数
*/
.test2 {
  /*
    quote($string) 给内容添加引号
    unquote($string) 去除内容的引号
    str-length($string) 计算内容的长度
    nsert($string, $insert, $index) 在字符串的指定位置插入内容
  */
  content: quote(这里是内容);
  background-color: unquote("#fff");
  content: str-length("scss笔记");
  content: str-insert($string: "scss笔记", $insert: "学习", $index: 5);
}

/*
  math 数值函数
  percentage($number) 将无单位的数值转换为百分比
  round($number) 对数字进行四舍五入
  floor($number) 向下取整
  ceil($number) 向上取整
  abs($number) 绝对值
  min() 获取几个数字中的最小值
  max() 获取几个数字中的最大值
  random($limit) 如果不传递$limit，则随机返回一个0-1之间的数字，如果传递$limit，则随机返回一个0-$limit之间的数字 
*/
.test3 {
  width: percentage($number: 0.5); // 50%
  width: round($number: 9.9); // 10
  width: floor($number: 9.6); // 9
  width: ceil($number: 9.2); // 10
  width: abs($number: -2); // 2
  width: min(1, 2, 3, 4, 5);
  width: max(1, 2, 3, 4, 5);
  width: random();
  width: random($limit: 10);
}

/*
  list 数组函数
  length($list) 返回数组的长度
  nth($list, $n) 返回指定的数组元素
  index($list, $value) 返回指定元素在列表中的位置，位置从1开始
  join($list1, $list2, $separator) 将两个列表连接到一起
  append($list, $val, $separator) 在列表的末尾添加一个值
*/
.test4 {
  $list1: 1, 2, 3, 4, 5;
  $list2: 6, 7, 8, 9, 10;
  width: length($list1); // 5
  width: nth($list1, 2); // 2
  width: index($list2, $value: 8);

  /*
    append($list, $val, $separator) 在列表的末尾添加一个值
    $list 列表
    $val 值
    $separator 分割符，可选 space | comma | slash | auto
  */
  width: append($list2, $val: 11, $separator: "auto");

  /*
    join($list1, $list2, $separator) 将两个列表连接到一起
    $list1 列表1
    $list2 列表2
    $separator 分割符，可选 space | comma | slash | auto
  */
  width: join($list1, $list2, $separator: "comma");
}

/*
  map 函数
  map-get($map, $key) 根据键值获取map中对应的值
  map-merge($map1, $map2) 将两个map合并成一个新的map
  map-has-key($map, $key) 判断map当中是否存在指定的key
  map-keys($map) 映射map中的全部键
  map-values($map) 映射map中的全部值
*/
$fontSizeMap1: (
  "small": 12px,
  "medium": 18px,
  "large": 24px,
);
$fontSizeMap2: (
  "normal": 16px,
);
$fontSizeMap3: map-merge(
  $map1: $fontSizeMap1,
  $map2: $fontSizeMap2,
);
.test5 {
  font-size: map-get($map: $fontSizeMap3, $key: "normal");
  @if map-has-key($map: $fontSizeMap3, $key: "normal") {
    content: "normal";
  }
  content: map-keys($map: $fontSizeMap3);
  content: map-values($map: $fontSizeMap3);
}

/*
  selector 选择器函数
  selector-append($selectors: …) 将第二个（也可以有多个）添加到第一个选择器的后面
  selector-unify(selector1, selector2) 将两组选择器合成一个复合选择器，如两个选择器无法合成，则返回 null 值
*/
.test6 {
  #{selector-append(".a", ".b", ".c")} {
    color: red;
  }

  #{selector-unify($selector1: "a", $selector2: ".disabled")} {
    background-color: #ccc;
  }
}

/*
  自检函数
*/
.test7 {
  $color: red;
  @mixin paddingMixin() {
    padding: 10px;
  }

  @if variable-exists($name: "color") {
    content: "可以使用$color变量";
  } @else {
    content: "不可以使用$color变量";
  }

  @if mixin-exists($name: "paddingMixin") {
    content: "可以使用paddingMixin混合";
  } @else {
    content: "不可以使用paddingMixin混合";
  }
}
